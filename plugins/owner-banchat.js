import fs from 'fs';

const handler = async (m, { conn }) => {
  // üîß VERIFICACI√ìN MEJORADA DE OWNER
  console.log('=== DEBUG OWNER CHECK ===');
  console.log('Sender original:', m.sender);
  
  // Normalizar el sender
  const normalizedSender = conn.decodeJid(m.sender).replace(/@.*/g, '@s.whatsapp.net');
  console.log('Sender normalizado:', normalizedSender);
  
  // Obtener el ID del bot de forma segura
  const botId = conn.decodeJid(conn.user?.id || global.conn?.user?.id || '');
  console.log('Bot ID:', botId);
  
  // Lista completa de owners
  const allOwners = [
    botId, // ID del bot
    ...global.owner.map(([number]) => number.replace(/[^0-9]/g, '') + '@s.whatsapp.net'),
    ...global.lidOwners.map((number) => number.replace(/[^0-9]/g, '') + '@s.whatsapp.net')
  ].filter(Boolean); // Filtrar valores vac√≠os
  
  console.log('Lista completa de owners:', allOwners);
  
  // Verificar si el usuario es owner
  const isROwner = allOwners.includes(normalizedSender);
  const isOwner = isROwner || m.fromMe;
  
  console.log('isROwner:', isROwner);
  console.log('isOwner:', isOwner);
  console.log('m.fromMe:', m.fromMe);
  console.log('========================');
  
  // Si no eres owner, mostrar mensaje de error detallado
  if (!isOwner) {
    const debugInfo = `‚ùå **NO AUTORIZADO**
    
üì± **Tu n√∫mero:** ${m.sender}
ü§ñ **Bot ID:** ${botId}
üëë **Owners configurados:**
${global.owner.map(([num, name]) => `   ‚Ä¢ ${num} (${name})`).join('\n')}

üîß **Owners principales:**
${global.lidOwners.map(num => `   ‚Ä¢ ${num}`).join('\n')}

‚ö†Ô∏è **Posibles soluciones:**
1. Verifica que tu n√∫mero est√© correctamente en config.js
2. Aseg√∫rate de incluir el c√≥digo de pa√≠s completo
3. Reinicia el bot despu√©s de modificar config.js
4. Verifica que no haya espacios extra en los n√∫meros`;
    
    return m.reply(debugInfo);
  }
  
  // Cargar idioma y traducci√≥n
  const datas = global;
  const idioma = datas.db.data.users[m.sender]?.language || global.defaultLenguaje;
  
  let tradutor;
  try {
    const _translate = JSON.parse(fs.readFileSync(`./src/languages/${idioma}.json`));
    tradutor = _translate.plugins.owner.banchat;
  } catch (error) {
    console.log('Error cargando traducci√≥n:', error);
    tradutor = { texto1: '‚úÖ Chat baneado exitosamente.' };
  }
  
  // Banear el chat
  if (!global.db.data.chats[m.chat]) {
    global.db.data.chats[m.chat] = {};
  }
  
  global.db.data.chats[m.chat].isBanned = true;
  
  // Confirmar acci√≥n
  const successMessage = `‚úÖ **CHAT BANEADO**

üö´ Este chat ha sido baneado exitosamente.
üì± Baneado por: @${m.sender.split('@')[0]}
‚è∞ Fecha: ${new Date().toLocaleString('es-ES')}

‚ÑπÔ∏è El bot no responder√° a comandos en este chat hasta que sea desbaneado.`;
  
  m.reply(successMessage, null, { mentions: [m.sender] });
};

handler.help = ['banchat'];
handler.tags = ['owner'];
handler.command = /^banchat$/i;
handler.owner = true;

export default handler;